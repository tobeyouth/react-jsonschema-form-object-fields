{"version":3,"sources":["webpack:///./example/form.jsx","webpack:///./example/index.jsx","webpack:///./src/index.jsx"],"names":["__webpack_require__","_react","DemoForm","onSubmit","data","errors","formData","console","log","Component","this","props","fields","ObjectFields","_react2","default","createElement","className","_reactJsonschemaForm2","schema","uiSchema","propTypes","PropTypes","object","defaultProps","ReactDom","render","_form2","document","getElementById","_utils","onPropertyChange","name","value","options","newFormData","_this","_defineProperty","onChange","Array","isArray","required","indexOf","_props","idSchema","errorSchema","_props$registry","disabled","readonly","onBlur","onFocus","registry","undefined","getDefaultRegistry","definitions","formContext","TitleField","DescriptionField","retrieveSchema","title","id","$id","description","renderPropertiesByFieldsets","_this2","_props2","fieldsets","Object","keys","properties","length","getFieldsets","map","sets","index","col","parseInt","key","renderProperty","renderProperties","_this3","_props3","_props3$registry","orderedProperties","orderProperties","err","style","color","message","JSON","stringify","_props4","_props4$registry","SchemaField","isRequired"],"mappings":"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","file":"example.js","sourcesContent":["import schema from './schema.json'\nimport uiSchema from './ui.json'\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport Form from 'react-jsonschema-form'\nimport ObjectFields from './../src/index'\n\nclass DemoForm extends Component {\n\n  static propTypes = {\n    formData: PropTypes.object\n  }\n\n  static defaultProps = {\n    formData: {}\n  }\n  \n  onSubmit = (data) => {\n    const {errors, formData} = data\n    console.log('errors', errors)\n    console.log('formData', formData)\n  }\n\n  render() {\n    let {formData} = this.props\n    let fields = {\n      'fields': ObjectFields\n    }\n\n    return (\n      <div className='main'>\n        <Form schema={schema}\n          uiSchema={uiSchema}\n          formData={formData}\n          fields={fields}\n          onSubmit={this.onSubmit} />\n      </div>\n    )\n  }\n}\n\nexport default DemoForm\n","import ReactDom from 'react-dom'\nimport React from 'react'\n\nimport DemoForm from './form'\n\nReactDom.render(<DemoForm />, document.getElementById('app'))\n","/**\n * require react-jsonschema-form and bootstrap\n * render inline fields\n * \n * fork from:\n * https://raw.githubusercontent.com/mozilla-services/react-jsonschema-form/master/src/components/fields/ObjectField.js\n */\n\nimport React, { Component } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport {\n  orderProperties,\n  retrieveSchema,\n  getDefaultRegistry,\n} from \"react-jsonschema-form/lib/utils\";\n\nclass ObjectFields extends Component {\n  static defaultProps = {\n    uiSchema: {},\n    formData: {},\n    errorSchema: {},\n    idSchema: {},\n    required: false,\n    disabled: false,\n    readonly: false,\n  };\n\n  isRequired(name) {\n    const schema = this.props.schema;\n    return (\n      Array.isArray(schema.required) && schema.required.indexOf(name) !== -1\n    );\n  }\n\n  onPropertyChange = name => {\n    return (value, options) => {\n      const newFormData = { ...this.props.formData, [name]: value };\n      this.props.onChange(newFormData, options);\n    };\n  };\n\n  render() {\n    const {\n      uiSchema,\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required,\n      disabled,\n      readonly,\n      onBlur,\n      onFocus,\n      registry = getDefaultRegistry(),\n    } = this.props;\n    const { definitions, fields, formContext } = registry;\n    const { TitleField, DescriptionField } = fields;\n    const schema = retrieveSchema(this.props.schema, definitions);\n    const title = schema.title === undefined ? name : schema.title;\n    \n    return (\n      <fieldset>\n        {(uiSchema[\"ui:title\"] || title) &&\n          <TitleField\n            id={`${idSchema.$id}__title`}\n            title={uiSchema[\"ui:title\"] || title}\n            required={required}\n            formContext={formContext}\n          />}\n        {(uiSchema[\"ui:description\"] || schema.description) &&\n          <DescriptionField\n            id={`${idSchema.$id}__description`}\n            description={uiSchema[\"ui:description\"] || schema.description}\n            formContext={formContext}\n          />}\n        { this.renderPropertiesByFieldsets() }\n      </fieldset>\n    );\n  }\n\n  renderPropertiesByFieldsets() {\n    const { uiSchema, schema } = this.props\n    const properties = Object.keys(schema.properties)\n\n    let fieldsets = getFieldsets(uiSchema)\n    if (!fieldsets) {\n      return this.renderProperties()\n    }\n\n\n    return (\n      fieldsets.map((sets, index) => {\n        if (!sets || sets.length.length === 0) {\n          return null\n        }\n        let col = parseInt(12/sets.length, 0)\n\n        return (\n          <div className=\"row\" key={`row-${index}`}>\n            {\n              sets.map((name, index) => {\n                return (\n                  <div className={`col-md-${col} col-xs-${col}`} \n                    key={`field-col-${name}`}>\n                    { this.renderProperty(name, `field-${index}`) }\n                  </div>\n                )\n              })\n            }\n          </div>\n        )\n      })\n    )\n  }\n\n  renderProperties() {\n    const {\n      uiSchema,\n      name,\n      registry = getDefaultRegistry(),\n    } = this.props;\n\n    const { definitions } = registry;\n    const schema = retrieveSchema(this.props.schema, definitions);\n\n    let orderedProperties;\n    try {\n      const properties = Object.keys(schema.properties);\n      orderedProperties = orderProperties(properties, uiSchema[\"ui:order\"]);\n    } catch (err) {\n      return (\n        <div>\n          <p className=\"config-error\" style={{ color: \"red\" }}>\n            Invalid {name || \"root\"} object field configuration:\n            <em>{err.message}</em>.\n          </p>\n          <pre>\n            {JSON.stringify(schema)}\n          </pre>\n        </div>\n      );\n    }\n\n    return (\n      orderedProperties.map((name, index) => {\n        return this.renderProperty(name, `field-${index}`)\n      })\n    )\n  }\n\n  renderProperty(name, key) {\n    const {\n      uiSchema,\n      formData,\n      errorSchema,\n      idSchema,\n      required,\n      disabled,\n      readonly,\n      onBlur,\n      onFocus,\n      registry = getDefaultRegistry(),\n    } = this.props;\n    const { definitions, fields, formContext } = registry;\n    const { SchemaField, TitleField, DescriptionField } = fields;\n    const schema = retrieveSchema(this.props.schema, definitions);\n\n    return (\n      <SchemaField\n        key={key}\n        name={name}\n        required={this.isRequired(name)}\n        schema={schema.properties[name]}\n        uiSchema={uiSchema[name]}\n        errorSchema={errorSchema[name]}\n        idSchema={idSchema[name]}\n        formData={formData[name]}\n        onChange={this.onPropertyChange(name)}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        registry={registry}\n        disabled={disabled}\n        readonly={readonly}\n      />\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== \"production\") {\n  ObjectField.propTypes = {\n    schema: PropTypes.object.isRequired,\n    uiSchema: PropTypes.object,\n    errorSchema: PropTypes.object,\n    idSchema: PropTypes.object,\n    onChange: PropTypes.func.isRequired,\n    formData: PropTypes.object,\n    required: PropTypes.bool,\n    disabled: PropTypes.bool,\n    readonly: PropTypes.bool,\n    registry: PropTypes.shape({\n      widgets: PropTypes.objectOf(\n        PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n      ).isRequired,\n      fields: PropTypes.objectOf(PropTypes.func).isRequired,\n      definitions: PropTypes.object.isRequired,\n      formContext: PropTypes.object.isRequired,\n    }),\n  };\n}\n\n\n// helper\nfunction getFieldsets(uiSchema) {\n  let fieldsets = uiSchema['ui:fieldsets']\n  if (!fieldsets || fieldsets.length === 0) {\n    return null\n  }\n  return fieldsets\n}\n\nexport default ObjectFields\n"],"sourceRoot":""}